// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

model Membership {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id])
  userId    String

  @@index([name])
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String       @id @default(cuid())
  name          String?
  email         String?      @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  memberships   Membership[]
  renter        Rental[]     @relation("renter")
  authorizer    Rental[]     @relation("authorizer")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Gear Stuff
model Rental {
  id Int @id @default(autoincrement())

  gearRented GearOnRental[]

  renter   User   @relation("renter", fields: [renterId], references: [id])
  renterId String

  authorizer   User   @relation("authorizer", fields: [authorizerId], references: [id])
  authorizerId String

  rentStart  DateTime
  rentDue    DateTime
  rentReturn DateTime?

  notes String?
}

model GearOnRental {
  gear   GearInstance @relation(fields: [gearId], references: [id])
  gearId String // relation scalar field (used in the `@relation` attribute above)

  rental   Rental @relation(fields: [rentalId], references: [id])
  rentalId Int // relation scalar field (used in the `@relation` attribute above)

  @@id([gearId, rentalId])
}

model GearModel {
  id    Int     @id @default(autoincrement())
  brand String?
  model String?

  categories CategoriesOnGear[]

  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  instances GearInstance[]
}

model GearInstance {
  id          String    @id @default(cuid())
  gearModel   GearModel @relation(fields: [gearModelId], references: [id])
  gearModelId Int

  gearRental GearOnRental[]

  notes    String?
  rentable Boolean @default(true)
}

model CategoriesOnGear {
  gear   GearModel @relation(fields: [gearId], references: [id])
  gearId Int // relation scalar field (used in the `@relation` attribute above)

  category   Category @relation(fields: [categoryId], references: [id])
  categoryId Int // relation scalar field (used in the `@relation` attribute above)

  @@id([gearId, categoryId])
}

model Category {
  id    Int                @id @default(autoincrement())
  name  String
  gears CategoriesOnGear[]
}
